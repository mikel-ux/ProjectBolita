/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package redball;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JPanel;
import javax.swing.JButton;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 *
 * @author saust
 */
public class PanelNiveles extends javax.swing.JPanel {

    private Ellipse2D[][] circles;
    private int totalLevels = 20;
    private int circleDiameter;
    private int gap = 60;  // Ajusta el valor de gap según sea necesario

    private int rows = totalLevels / (totalLevels / 4);  // Cambiar el número de filas según sea necesario
    private int columns = totalLevels / rows;  // Cambiar el número de columnas según sea necesario

    private MainFrame mainFrame;

    public PanelNiveles(MainFrame frame) {
        this.mainFrame = frame;
        initComponents();

        // Calcula el diámetro y crea la matriz de círculos en función del número de niveles
        int maxCircles = rows * columns;
        totalLevels = Math.min(totalLevels, maxCircles); // Asegúrate de que no haya más niveles que círculos

        circles = new Ellipse2D[totalLevels][1];
        for (int i = 0; i < totalLevels; i++) {
            int row = i / columns;
            int col = i % columns;
            int x = gap + col * (circleDiameter + gap);
            int y = gap + row * (circleDiameter + gap);
            circles[i][0] = new Ellipse2D.Double(x, y, circleDiameter, circleDiameter);
        }

        addMouseListener(new CircleClickListener());
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        // Calcula el ancho y alto del panel
        int panelWidth = getWidth();
        int panelHeight = getHeight();

        // Define la cantidad de filas y columnas deseadas para los círculos    
        // Calcula el espacio disponible para los círculos
        int availableWidth = panelWidth - (columns + 1) * gap;
        int availableHeight = panelHeight - (rows + 1) * gap;

        // Calcula el nuevo diámetro de los círculos
        circleDiameter = Math.min(availableWidth / columns, availableHeight / rows);

        circles = new Ellipse2D[totalLevels][1];
        for (int i = 0; i < totalLevels; i++) {
            int row = i / columns;
            int col = i % columns;
            int x = gap + col * (circleDiameter + gap) + (int) (mainFrame.anchoPantalla / 6);
            int y = gap + row * (circleDiameter + gap) + (mainFrame.anchoPantalla / (totalLevels * 10));
            circles[i][0] = new Ellipse2D.Double(x, y, circleDiameter, circleDiameter);
        }

        Font font = new Font("Arial", Font.BOLD, circleDiameter / 3);
        g2d.setFont(font);

        for (int i = 0; i < totalLevels; i++) {
            Ellipse2D circle = circles[i][0];
            g2d.setColor(Color.RED);
            g2d.fill(circle);
            g2d.setColor(Color.BLACK);
            g2d.draw(circle);

            int centerX = (int) (circle.getCenterX());
            int centerY = (int) (circle.getCenterY());

            String number = String.valueOf(i + 1);
            FontMetrics fm = g.getFontMetrics();
            int stringWidth = fm.stringWidth(number);
            int stringHeight = fm.getAscent();
            int x = centerX - stringWidth / 2;
            int y = centerY + stringHeight / 2;

            g2d.setColor(Color.BLACK);
            g2d.drawString(number, x, y);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new Color(224, 224, 224, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {
        ImageIcon fondo = new ImageIcon(getClass().getResource("/imagenes/pixelMontania.jpg"));
        g.drawImage(fondo.getImage(), 0, 0, getWidth(), getHeight(), this);
        setOpaque(false);
        super.paint(g);
    }

    private class CircleClickListener implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {
            // Obtén las coordenadas del clic del ratón
            int x = e.getX();
            int y = e.getY();

            // Comprueba si el clic está dentro de algún círculo
            for (int i = 0; i < totalLevels; i++) {
                if (circles[i][0].contains(x, y)) {
                    // Realiza acciones específicas cuando se hace clic en el círculo
                    System.out.println("Clic en el círculo " + (i + 1));
                    break;  // No necesitas verificar otros círculos
                }
            }
        }

        // Otros métodos del MouseListener (puedes dejarlos vacíos si no los necesitas)
        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
